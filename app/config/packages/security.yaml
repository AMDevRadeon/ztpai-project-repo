security:
    # https://symfony.com/doc/current/security.html#registering-the-user-hashing-passwords
    password_hashers:
        Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface: 'auto'
    # https://symfony.com/doc/current/security.html#loading-the-user-the-user-provider
    providers:
        app_provider:
            entity:
                class: App\Entity\User
                property: email
    firewalls:
        dev:
            pattern: ^/(_(profiler|wdt)|css|images|js)/
            security: false

        login:
            pattern: /api/v1/login
            stateless: true
            json_login:
                check_path: api_login_check
                username_path: email
                password_path: password
                success_handler: lexik_jwt_authentication.handler.authentication_success
                failure_handler: lexik_jwt_authentication.handler.authentication_failure
            provider: app_provider

        api:
            pattern:   /api/v1
            stateless: true
            entry_point: jwt
            jwt: ~
            refresh_jwt:
                check_path: api_token_refresh
            logout:
                path: api_token_invalidate
            provider: app_provider

        main:
            lazy: true
            provider: app_provider


            # activate different ways to authenticate
            # https://symfony.com/doc/current/security.html#the-firewall

            # https://symfony.com/doc/current/security/impersonating_user.html
            # switch_user: true

    # Easy way to control access for large sections of your site
    # Note: Only the *first* access control that matches will be used
    access_control:
        - { path: ^/api/v1/login_check,        roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/token_refresh,      roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/token_invalidate,   roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/register,           roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/user/\d+$,          roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/user/me,            roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/v1/admin,              roles: ROLE_ADMIN }

        - { path: ^/api/v1/topic/get,          roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/post/get,           roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/post/add,           roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/v1/post/edit,          roles: IS_AUTHENTICATED_FULLY }
        - { path: ^/api/v1/comment/get,        roles: PUBLIC_ACCESS }
        - { path: ^/api/v1/comment/add,        roles: IS_AUTHENTICATED_FULLY }
        # - { path: ^/admin, roles: ROLE_ADMIN }
        # - { path: ^/profile, roles: ROLE_USER }

when@test:
    security:
        password_hashers:
            # By default, password hashers are resource intensive and take time. This is
            # important to generate secure password hashes. In tests however, secure hashes
            # are not important, waste resources and increase test times. The following
            # reduces the work factor to the lowest possible values.
            Symfony\Component\Security\Core\User\PasswordAuthenticatedUserInterface:
                algorithm: auto
                cost: 4 # Lowest possible value for bcrypt
                time_cost: 3 # Lowest possible value for argon
                memory_cost: 10 # Lowest possible value for argon
